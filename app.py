from flask import Flask, render_template, request, redirect, url_for, session
import os

app = Flask(__name__)
# Chave secreta para a sess√£o (necess√°rio para usar 'session')
# Troque por uma string aleat√≥ria e complexa em um ambiente de produ√ß√£o real!
app.secret_key = os.urandom(24)

# Lista de perguntas, op√ß√µes e respostas corretas
quiz_questions = [
    {
        "pergunta": "O que √© poupan√ßa?",
        "opcoes": [
            "a) Gastar todo o dinheiro que voc√™ tem.",
            "b) Guardar uma parte do dinheiro para usar no futuro.",
            "c) Pedir dinheiro emprestado para comprar o que quiser.",
            "d) Doar todo o seu dinheiro para caridade."
        ],
        "resposta": "b",
        "explicacao": "Poupan√ßa √© o ato de guardar dinheiro com um objetivo futuro, seja para uma compra, uma emerg√™ncia ou um investimento."
    },
    {
        "pergunta": "Qual a diferen√ßa entre 'necessidade' e 'desejo'?",
        "opcoes": [
            "a) Necessidade √© algo que queremos muito, desejo √© o que precisamos para sobreviver.",
            "b) Necessidade √© o que precisamos para viver (comida, moradia), desejo √© algo que gostar√≠amos de ter (brinquedo novo, celular).",
            "c) N√£o h√° diferen√ßa, s√£o a mesma coisa.",
            "d) Necessidade √© um luxo, desejo √© uma obriga√ß√£o."
        ],
        "resposta": "b",
        "explicacao": "Necessidades s√£o itens essenciais para a sobreviv√™ncia e bem-estar b√°sico, enquanto desejos s√£o coisas que gostar√≠amos de ter, mas n√£o s√£o indispens√°veis."
    },
    {
        "pergunta": "Se voc√™ recebe sua mesada e anota tudo o que entra e sai de dinheiro, voc√™ est√° fazendo um:",
        "opcoes": [
            "a) Gasto desnecess√°rio.",
            "b) Or√ßamento.",
            "c) Desperd√≠cio.",
            "d) Empr√©stimo."
        ],
        "resposta": "b",
        "explicacao": "Um or√ßamento √© uma ferramenta para planejar e controlar suas finan√ßas, registrando receitas e despesas."
    },
    {
        "pergunta": "O que pode acontecer se voc√™ gastar mais dinheiro do que ganha constantemente?",
        "opcoes": [
            "a) Voc√™ ficar√° rico rapidamente.",
            "b) Voc√™ acumular√° d√≠vidas.",
            "c) Seu dinheiro vai multiplicar automaticamente.",
            "d) Voc√™ receber√° um b√¥nus."
        ],
        "resposta": "b",
        "explicacao": "Gastar mais do que se ganha leva ao endividamento, que pode gerar juros e dificultar sua situa√ß√£o financeira."
    },
    {
        "pergunta": "Por que √© importante comparar pre√ßos antes de comprar algo?",
        "opcoes": [
            "a) Para gastar mais dinheiro.",
            "b) Para economizar e fazer o seu dinheiro render mais.",
            "c) Para encontrar o item mais caro.",
            "d) Para mostrar que voc√™ tem dinheiro."
        ],
        "resposta": "b",
        "explicacao": "Comparar pre√ßos ajuda a encontrar a melhor oferta, economizar dinheiro e fazer compras mais inteligentes."
    }
]

@app.route('/')
def index():
    """P√°gina inicial do quiz."""
    return render_template('index.html')

@app.route('/quiz', methods=['GET', 'POST'])
def quiz():
    """Gerencia as perguntas do quiz."""
    if request.method == 'GET':
        # Reinicia o quiz ao carregar a p√°gina pela primeira vez ou recarregar
        session['score'] = 0
        session['current_question_index'] = 0
        return render_questionario()
    elif request.method == 'POST':
        # Processa a resposta do usu√°rio
        user_answer = request.form.get('answer')
        current_index = session.get('current_question_index', 0)

        # Se n√£o houver resposta selecionada, retorna para a mesma pergunta com um aviso
        if not user_answer:
            current_question = quiz_questions[current_index]
            error_message = "Por favor, selecione uma op√ß√£o antes de continuar."
            return render_template('question.html', 
                                   question=current_question, 
                                   question_number=current_index + 1, 
                                   total_questions=len(quiz_questions),
                                   error=error_message)

        # Verifica se a resposta est√° correta
        if user_answer == quiz_questions[current_index]['resposta']:
            session['score'] += 1

        # Avan√ßa para a pr√≥xima pergunta
        session['current_question_index'] += 1

        # Verifica se h√° mais perguntas
        if session['current_question_index'] < len(quiz_questions):
            return render_questionario()
        else:
            return redirect(url_for('result'))

def render_questionario():
    """Fun√ß√£o auxiliar para renderizar a p√°gina da pergunta atual."""
    current_index = session.get('current_question_index', 0)
    current_question = quiz_questions[current_index]
    return render_template('question.html',
                           question=current_question,
                           question_number=current_index + 1,
                           total_questions=len(quiz_questions))

@app.route('/resultados')
def resultados():
    """Exibe o resultado final do quiz."""
    final_score = session.get('score', 0)
    total_questions = len(quiz_questions)

    feedback = ""
    if final_score == total_questions:
        feedback = "Parab√©ns! Voc√™ √© um(a) expert em educa√ß√£o financeira b√°sica! üí∞"
    elif final_score >= total_questions / 2:
        feedback = "Muito bom! Voc√™ tem um bom conhecimento de educa√ß√£o financeira. Continue aprendendo! üëç"
    else:
        feedback = "Voc√™ est√° no caminho certo! Continue estudando para melhorar seu conhecimento financeiro. üìö"

    return render_template('resultados.html', score=final_score, total=total_questions, feedback=feedback)

if __name__ == '__main__':
    # Para rodar o app localmente, o modo debug √© √∫til para desenvolvimento
    app.run(debug=True)